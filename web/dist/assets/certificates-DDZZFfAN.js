import{A as f,r as s,B as n,C as v,D as d,E as h}from"./index-_QPn6ggU.js";const p=f("certificates",()=>{const i=s([]),a=s(!1),t=s(null);return{certificates:i,loading:a,error:t,fetchCertificates:async c=>{a.value=!0,t.value=null;try{const{data:e,error:r}=await n(c);if(r)throw r;i.value=e||[]}catch(e){t.value=e.message||"Failed to fetch certificates",console.error("Error fetching certificates:",e)}finally{a.value=!1}},addCertificate:async c=>{a.value=!0,t.value=null;try{const{data:e,error:r}=await v(c);if(r)throw r;return e&&i.value.unshift(e),{success:!0}}catch(e){return t.value=e.message||"Failed to create certificate",console.error("Error creating certificate:",e),{success:!1,error:t.value}}finally{a.value=!1}},updateCertificateStatus:async(c,e)=>{a.value=!0,t.value=null;try{const{data:r,error:l}=await d(c,e);if(l)throw l;if(r){const u=i.value.findIndex(o=>o.id===c);u!==-1&&(i.value[u]=r)}return{success:!0}}catch(r){return t.value=r.message||"Failed to update certificate",console.error("Error updating certificate:",r),{success:!1,error:t.value}}finally{a.value=!1}},removeCertificate:async c=>{a.value=!0,t.value=null;try{const{error:e}=await h(c);if(e)throw e;return i.value=i.value.filter(r=>r.id!==c),{success:!0}}catch(e){return t.value=e.message||"Failed to delete certificate",console.error("Error deleting certificate:",e),{success:!1,error:t.value}}finally{a.value=!1}}}});export{p as u};
